SQL

./gcloud sql instances create "mlops-exp" \                  
  --database-version=POSTGRES_15 \
  --region=us-west2 \
  --tier=db-f1-micro \
  --storage-type=HDD \
  --storage-size=10 \
  --authorized-networks=0.0.0.0/0

./gcloud sql users create GopiMaguluri \                     
  --instance="mlops_exp" \        
  --password="Gopi@123" \
  --project="mlops-msds-603"

./gcloud sql databases create "mlflow" --instance="mlops-exp"

----------------------------------------------------------------------

GCS

./gcloud storage buckets create gs://storage-msds603

----------------------------------------------------------------------

REPOSITORY

./gcloud artifacts repositories create "mlops-mlflow" \      
--location=us-west2 \       
--repository-format=docker

----------------------------------------------------------------------

SERVICE ACCOUNT

./gcloud iam service-accounts create "mlops-user"

./gcloud config get-value project

./gcloud projects add-iam-policy-binding "mlops-msds-603" --member='serviceAccount:mlops-user@mlops-msds-603.iam.gserviceaccount.com' --role='roles/cloudsql.editor'

./gcloud projects add-iam-policy-binding "mlops-msds-603" --member='serviceAccount:mlops-user@mlops-msds-603.iam.gserviceaccount.com' --role='roles/storage.objectAdmin'

./gcloud projects add-iam-policy-binding "mlops-msds-603" --member='serviceAccount:mlops-user@mlops-msds-603.iam.gserviceaccount.com' --role='roles/secretmanager.secretAccessor'

./gcloud projects add-iam-policy-binding "mlops-msds-603" --member='serviceAccount:mlops-user@mlops-msds-603.iam.gserviceaccount.com' --role='roles/artifactregistry.admin'

./gcloud projects add-iam-policy-binding "mlops-msds-603" --member='serviceAccount:mlops-user@mlops-msds-603.iam.gserviceaccount.com' --role='roles/clouddeploy.serviceAgent'

./gcloud projects add-iam-policy-binding "mlops-msds-603" --member='serviceAccount:mlops-user@mlops-msds-603.iam.gserviceaccount.com' --role='roles/cloudfunctions.admin'

----------------------------------------------------------------------

SECRETS

./gcloud iam service-accounts keys create sa-private-key.json --iam-account=mlops-user@mlops-msds-603.iam.gserviceaccount.com

./gcloud secrets create access_keys --data-file=sa-private-key.json

./gcloud sql instances describe "mlops-exp"

./gcloud secrets create database_url

echo -n "postgresql://gmaguluri:gopi@123@35.235.106.74/mlflow" | \
    gcloud secrets versions add database_url --data-file=-


./gcloud secrets create bucket_url

echo -n "gs://storage-msds603/mlruns" | gcloud secrets versions add bucket_url --data-file=-

----------------------------------------------------------------------

DOCKER

./gcloud auth configure-docker us-west2-docker.pkg.dev

docker build --platform linux/amd64 -t "us-west2-docker.pkg.dev/mlops-msds-603/mlops-mlflow/mlflow:v1" .

docker build --platform linux/amd64 -t \
"us-west2-docker.pkg.dev/mlops-msds-603/mlops-mlflow/mlflow:v2" .

docker push "us-west2-docker.pkg.dev/mlops-msds-603/mlops-mlflow/mlflow:v1"

docker push "us-west2-docker.pkg.dev/mlops-msds-603/mlops-mlflow/mlflow:v2"


(OR)

./gcloud builds submit --tag us-west2-docker.pkg.dev/mlops-msds-603/mlops-mlflow/mlflow:v1 # no need to push in this case

(INCASE OF ERROR)
./gcloud services enable compute.googleapis.com

----------------------------------------------------------------------

GOOGLE CLOUD RUN

./gcloud run deploy "mlops-mlflow-lab-5" \
          --image "us-west2-docker.pkg.dev/mlops-msds-603/mlops-mlflow/mlflow:v1" \
          --region "us-west2" \
          --service-account "mlops-user" \
          --update-secrets=/secrets/credentials=access_keys:latest \
          --update-secrets=POSTGRESQL_URL=database_url:latest \
          --update-secrets=STORAGE_URL=bucket_url:latest \
          --memory 2Gi \
          --allow-unauthenticated \
          --port 8080


----

gcloud run deploy "mlflow-run" \
          --image "us-west2-docker.pkg.dev/mlops-msds-603/mlops-mlflow/mlflow:v2" \
          --region "us-west2" \
          --service-account mlops-user \
          --update-secrets=/secrets/credentials=access_keys:latest \
          --update-secrets=POSTGRESQL_URL=database_url:latest \
          --update-secrets=STORAGE_URL=bucket_url:latest \
          --memory 2Gi \
          --allow-unauthenticated \
          --port 8080






########################################################################
########################################################################
########################################################################


## Initialization
gcloud init
<select project or create. Link billing account>
<projectid: nirant-gcp>

-------------------------------------------------------------------------------
## SQL
### Instance
gcloud sql instances create nirant-instance \
--database-version=POSTGRES_15 \
--region=us-west2 \
--tier=db-f1-micro \
--storage-type=HDD \
--storage-size=10GB \
--authorized-networks=0.0.0.0/0

    ----------------------------------------------------------------------
### User
gcloud sql users create nirant \
--instance=nirant-instance \
--password=life-is-tough

    ----------------------------------------------------------------------
### Database
gcloud sql databases create nirant-runs --instance=nirant-instance

-------------------------------------------------------------------------------
## GCS
gcloud storage buckets create gs://nirant-bucket-16042025
<create mlfruns folder in the bucket on console>

-------------------------------------------------------------------------------
## Artifact Repo
gcloud artifacts repositories create nirant-repo \
--location=us-west2 \
--repository-format=docker

-------------------------------------------------------------------------------
## Service Account
gcloud iam service-accounts create nirant-sa
<get project name using this>
gcloud config get-value project

-------------------------------------------------------------------------------
## Roles
gcloud projects add-iam-policy-binding gopi-gcp \
--member='serviceAccount:gopi-sa@gopi-gcp.iam.gserviceaccount.com' \
--role='roles/cloudsql.editor'

gcloud projects add-iam-policy-binding gopi-gcp \
--member='serviceAccount:gopi-sa@gopi-gcp.iam.gserviceaccount.com' \
--role='roles/storage.objectAdmin'

gcloud projects add-iam-policy-binding gopi-gcp \
--member='serviceAccount:gopi-sa@gopi-gcp.iam.gserviceaccount.com' \
--role='roles/secretmanager.secretAccessor'

gcloud projects add-iam-policy-binding gopi-gcp \
--member='serviceAccount:gopi-sa@gopi-gcp.iam.gserviceaccount.com' \
--role='roles/artifactregistry.admin'

gcloud projects add-iam-policy-binding gopi-gcp \
--member='serviceAccount:gopi-sa@gopi-gcp.iam.gserviceaccount.com' \
--role='roles/clouddeploy.serviceAgent'

gcloud projects add-iam-policy-binding gopi-gcp \
--member='serviceAccount:gopi-sa@gopi-gcp.iam.gserviceaccount.com' \
--role='roles/cloudfunctions.admin'

-------------------------------------------------------------------------------
## Secrets
### Service Account
gcloud iam service-accounts keys create sa-private-key.json \
--iam-account=gopi-sa@gopi-gcp.iam.gserviceaccount.com

gcloud secrets create access_keys --data-file=sa-private-key.json

    ----------------------------------------------------------------------
### SQL Instance
gcloud sql instances describe gopi-instance
<get the primary IP address, ex: 34.102.57.177>

gcloud secrets create database_url

echo -n "postgresql://gopi:life-is-tough@35.236.108.35/gopi-runs" | \
    gcloud secrets versions add database_url --data-file=-

    ----------------------------------------------------------------------
### GCS
gcloud secrets create bucket_url

echo -n "gs://gopi-bucket-16042025/mlruns" | \
    gcloud secrets versions add bucket_url --data-file=-

-------------------------------------------------------------------------------
## Docker
<create requirements.txt>
<create Dockerfile>
<create server.sh>

gcloud auth configure-docker us-west2-docker.pkg.dev

docker build --platform linux/amd64 -t \
"us-west2-docker.pkg.dev/gopi-gcp/gopi-repo/mlflow:v1" .

docker push "us-west2-docker.pkg.dev/gopi-gcp/gopi-repo/mlflow:v1"

-------------------------------------------------------------------------------
## Enable Services

gcloud services enable compute.googleapis.com
gcloud services enable run.googleapis.com

-------------------------------------------------------------------------------
## Cloud Run 

gcloud run deploy "mlflow-run" \
          --image "us-west2-docker.pkg.dev/gopi-gcp/gopi-repo/mlflow:v1" \
          --region "us-west2" \
          --service-account gopi-sa \
          --update-secrets=/secrets/credentials=access_keys:latest \
          --update-secrets=POSTGRESQL_URL=database_url:latest \
          --update-secrets=STORAGE_URL=bucket_url:latest \
          --memory 2Gi \
          --allow-unauthenticated \
          --port 8080 \
          --command "mlflow" \
          --args "server,--host=0.0.0.0,--port=8080"

-------------------------------------------------------------------------------
## ML Flow

<replace tracking uri with the url you get>

-------------------------------------------------------------------------------
## Destroying project

gcloud run services delete mlflow-run --region us-west2
gsutil rm -r gs://nirant-instance-15032025
gcloud sql instances delete nirant-instance
gcloud secrets delete database_url
gcloud secrets delete bucket_url
gcloud iam service-accounts delete nirant-sa@nirant-gcp.iam.gserviceaccount.com
gcloud artifacts repositories delete nirant-instance --location=us-west2

-- 
gcloud projects delete nirant-gcp


